name: Release
on:
  workflow_dispatch:

permissions:
  contents: read # for checkout

jobs:
  type-check:
    uses: ./.github/workflows/typecheck.yml
    name: Check Types
  lint:
    uses: ./.github/workflows/lint.yml
    name: Lint
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [type-check, lint]
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
      packages: write
    outputs:
      published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      major: ${{ steps.semantic.outputs.new_release_major_version }}
      minor: ${{ steps.semantic.outputs.new_release_minor_version }}
      patch: ${{ steps.semantic.outputs.new_release_patch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy-docs:
    name: Build and Deploy Docs
    needs: [release]
    if: needs.release.outputs.published == 'true'
    permissions:
      contents: write
      pages: write
      id-token: write
    uses: ./.github/workflows/docs.yml
      
  docker-build:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs: ['release']
    if: needs.release.outputs.published == 'true'
    name: 'Build and Publish Image'
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker meta (runner)
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/dynamicabot/dynamica-v2
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=${{ needs.release.outputs.major }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}.${{ needs.release.outputs.patch }}
      - name: Docker meta (runner)
        id: meta-pterodactyl
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/dynamicabot/dynamica-v2
          flavor: |
            suffix=-pterodactyl,onlatest=true
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=${{ needs.release.outputs.major }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}
            type=raw,value=${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}.${{ needs.release.outputs.patch }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (runner)
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          context: .
          target: 'runner'
          cache-from: type=registry,ref=ghcr.io/dynamicabot/dynamica-v2:latest
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          tags: ${{ steps.meta.outputs.tags }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push (runner)
        uses: docker/build-push-action@v5
        id: docker_build_pterodactyl
        with:
          context: .
          target: 'pterodactyl'
          build-args: |
            VERSION=${{ needs.release.outputs.version }}
          tags: ${{ steps.meta-pterodactyl.outputs.tags }}
          push: true
          labels: ${{ steps.meta-pterodactyl.outputs.labels }}
      
      - name: Extract /app/dist
        uses: docker/build-push-action@v5
        id: docker_build_dist
        with:
          context: .
          target: 'dist'
          push: false
          outputs: type=local,dest=./dist
      
      - uses: getsentry/action-release@v1
        with:
          environment: 'production'
          sourcemaps: './dist'
          version: ${{ needs.release.outputs.version }}